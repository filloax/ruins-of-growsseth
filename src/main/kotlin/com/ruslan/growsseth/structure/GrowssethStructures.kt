package com.ruslan.growsseth.structure

import com.filloax.fxlib.structure.ForcePosJigsawStructure
import com.ruslan.growsseth.structure.pieces.ResearcherTent
import com.ruslan.growsseth.structure.structure.ResearcherTentStructure
import com.ruslan.growsseth.utils.resLoc
import net.minecraft.core.registries.Registries
import net.minecraft.data.worldgen.BootstapContext
import net.minecraft.resources.ResourceKey
import net.minecraft.resources.ResourceLocation
import net.minecraft.world.level.levelgen.structure.Structure
import net.minecraft.world.level.levelgen.structure.StructureType

object GrowssethStructures {
    @JvmStatic
    val all = HashSet<ResourceKey<Structure>>()

    // Defined via data, here for reference
    @JvmField
    val RESEARCHER_TENT = key("researcher_tent")
    @JvmField
    val BEEKEEPER_HOUSE = key("beekeeper_house")
    @JvmField
    val CAVE_CAMP = key("cave_camp")
    @JvmField
    val MARKER = key("marker")
    @JvmField
    val GOLEM_HOUSE = key("golem_house")
    @JvmField
    val ENCHANT_TOWER = key("enchant_tower")
    @JvmField
    val ABANDONED_FORGE = key("abandoned_forge")
    @JvmField
    val CONDUIT_RUINS = key("conduit_ruins")
    @JvmField
    val CONDUIT_CHURCH = key("conduit_church")
    @JvmField
    val NOTEBLOCK_LAB = key("noteblock_lab")
    @JvmField
    val NOTEBLOCK_SHIP = key("noteblock_ship")

    // autogenerated this part via python lol
    object GolemStandaloneVariants {
        @JvmField
        val GOLEM_HOUSE_SNOWY = key("village/snowy/snowy_golem_house")
        @JvmField
        val GOLEM_HOUSE_TAIGA = key("village/taiga/taiga_golem_house")
        @JvmField
        val GOLEM_HOUSE_DESERT = key("village/desert/desert_golem_house")
        @JvmField
        val GOLEM_HOUSE_PLAINS = key("village/plains/plains_golem_house")
        @JvmField
        val GOLEM_HOUSE_SAVANNA = key("village/savanna/savanna_golem_house")
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_DESERT = key("village/desert/desert_golem_house_zombie")
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_PLAINS = key("village/plains/plains_golem_house_zombie")
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_SAVANNA = key("village/savanna/savanna_golem_house_zombie")
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_SNOWY = key("village/snowy/snowy_golem_house_zombie")
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_TAIGA = key("village/taiga/taiga_golem_house_zombie")
    }

    object CydoniaVersion {
        @JvmField
        val RESEARCHER_TENT = cydoniaKey("researcher_tent")
        @JvmField
        val BEEKEEPER_HOUSE = cydoniaKey("beekeeper_house")
        @JvmField
        val CAVE_CAMP = cydoniaKey("cave_camp")
        @JvmField
        val MARKER = cydoniaKey("marker")
        @JvmField
        val GOLEM_HOUSE = cydoniaKey("golem_house")
        @JvmField
        val ENCHANT_TOWER = cydoniaKey("enchant_tower")
        @JvmField
        val CONDUIT_RUINS = cydoniaKey("conduit_ruins")
        @JvmField
        val NOTEBLOCK_LAB = cydoniaKey("noteblock_lab")
    }

    object Types {
        @JvmStatic
        val all = mutableMapOf<ResourceLocation, StructureType<*>>()

        val RESEARCHER_TENT = registerType("researcher_tent") { ResearcherTentStructure.CODEC }
//        val RESEARCHER_TENT_CELLAR = registerType("researcher_tent_cellar") { ResearcherTentStructure.CODEC }

        private fun <T : Structure> registerType(name: String, type: StructureType<T>): StructureType<T> {
            val id = resLoc(name)
            all[id] = type
            return type
        }
    }

    fun registerStructureTypes(registrator: (ResourceLocation, StructureType<*>) -> Unit) {
        Types.all.forEach{
            registrator(it.key, it.value)
        }
    }

    private fun key(name: String): ResourceKey<Structure> {
        val key = ResourceKey.create(Registries.STRUCTURE, resLoc(name))
        all.add(key)
        return key
    }

    private fun cydoniaKey(name: String) = key("cydonia/$name")

    // Used in data generation
    fun bootstrap(ctx: BootstapContext<Structure>) {
        ctx.register(RESEARCHER_TENT, ResearcherTentStructure.build(ctx))
        ctx.register(CydoniaVersion.RESEARCHER_TENT, ResearcherTentStructure.build(ctx, ResearcherTent.CYDONIA_ID))
    }
}