package com.ruslan.growsseth.structure

import com.ruslan.growsseth.GrowssethTags.StructTags
import com.ruslan.growsseth.structure.pieces.ResearcherTent
import com.ruslan.growsseth.structure.structure.ResearcherTentStructure
import com.ruslan.growsseth.utils.resLoc
import net.minecraft.core.registries.Registries
import net.minecraft.data.worldgen.BootstapContext
import net.minecraft.data.worldgen.PlainVillagePools
import net.minecraft.data.worldgen.Structures
import net.minecraft.resources.ResourceKey
import net.minecraft.resources.ResourceLocation
import net.minecraft.tags.BiomeTags
import net.minecraft.tags.TagKey
import net.minecraft.world.level.levelgen.Heightmap
import net.minecraft.world.level.levelgen.VerticalAnchor
import net.minecraft.world.level.levelgen.heightproviders.ConstantHeight
import net.minecraft.world.level.levelgen.structure.BuiltinStructures
import net.minecraft.world.level.levelgen.structure.Structure
import net.minecraft.world.level.levelgen.structure.StructureType
import net.minecraft.world.level.levelgen.structure.TerrainAdjustment
import net.minecraft.world.level.levelgen.structure.structures.JigsawStructure

object GrowssethStructures {
    @JvmStatic
    val all = HashSet<ResourceKey<Structure>>()
    val info = mutableMapOf<ResourceKey<Structure>, StructureInfo>()
    @JvmStatic
    val cydoniaToOriginal = mutableMapOf<ResourceKey<Structure>, ResourceKey<Structure>>()

    // Defined via data, here for reference
    @JvmField
    val RESEARCHER_TENT = make("researcher_tent", StructTags.RESEARCHER_TENT)
    @JvmField
    val BEEKEEPER_HOUSE = make("beekeeper_house", StructTags.BEEKEEPER_HOUSE)
    @JvmField
    val CAVE_CAMP = make("cave_camp", StructTags.CAVE_CAMP)
    @JvmField
    val MARKER = make("marker", StructTags.MARKER)
    @JvmField
    val GOLEM_HOUSE = make("golem_house", StructTags.GOLEM_HOUSE)
    @JvmField
    val ENCHANT_TOWER = make("enchant_tower", StructTags.ENCHANT_TOWER)
    @JvmField
    val ABANDONED_FORGE = make("abandoned_forge", StructTags.ABANDONED_FORGE)
    @JvmField
    val CONDUIT_RUINS = make("conduit_ruins", StructTags.CONDUIT_RUINS)
    @JvmField
    val CONDUIT_CHURCH = make("conduit_church", StructTags.CONDUIT_CHURCH)
    @JvmField
    val NOTEBLOCK_LAB = make("noteblock_lab", StructTags.NOTEBLOCK_LAB)
    @JvmField
    val NOTEBLOCK_SHIP = make("noteblock_ship", StructTags.NOTEBLOCK_SHIP)

    // autogenerated this part via python lol
    object GolemStandaloneVariants {
        @JvmField
        val GOLEM_HOUSE_SNOWY = make("village/snowy/snowy_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_TAIGA = make("village/taiga/taiga_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_DESERT = make("village/desert/desert_golem", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_PLAINS = make("village/plains/plains_golem", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_SAVANNA = make("village/savanna/savanna_golem", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_DESERT = make("village/desert/desert_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_PLAINS = make("village/plains/plains_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_SAVANNA = make("village/savanna/savanna_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_SNOWY = make("village/snowy/snowy_golem_house", StructTags.GOLEM_HOUSE)
        @JvmField
        val GOLEM_HOUSE_ZOMBIE_TAIGA = make("village/taiga/taiga_golem_house", StructTags.GOLEM_HOUSE)
    }

    object CydoniaVersion {
        @JvmField
        val RESEARCHER_TENT = makeCydonia("researcher_tent", GrowssethStructures.RESEARCHER_TENT)
        @JvmField
        val BEEKEEPER_HOUSE = makeCydonia("beekeeper_house", GrowssethStructures.BEEKEEPER_HOUSE)
        @JvmField
        val CAVE_CAMP = makeCydonia("cave_camp", GrowssethStructures.CAVE_CAMP)
        @JvmField
        val MARKER = makeCydonia("marker", GrowssethStructures.MARKER)
        @JvmField
        val GOLEM_HOUSE = makeCydonia("golem_house", GrowssethStructures.GOLEM_HOUSE)
        @JvmField
        val ENCHANT_TOWER = makeCydonia("enchant_tower", GrowssethStructures.ENCHANT_TOWER)
        @JvmField
        val CONDUIT_CHURCH = makeCydonia("conduit_ruins", GrowssethStructures.CONDUIT_CHURCH)
        @JvmField
        val NOTEBLOCK_LAB = makeCydonia("noteblock_lab", GrowssethStructures.NOTEBLOCK_LAB)
    }

    object Types {
        @JvmStatic
        val all = mutableMapOf<ResourceLocation, StructureType<*>>()

        val RESEARCHER_TENT = registerType("researcher_tent") { ResearcherTentStructure.CODEC }
//        val RESEARCHER_TENT_CELLAR = registerType("researcher_tent_cellar") { ResearcherTentStructure.CODEC }

        private fun <T : Structure> registerType(name: String, type: StructureType<T>): StructureType<T> {
            val id = resLoc(name)
            all[id] = type
            return type
        }
    }

    fun registerStructureTypes(registrator: (ResourceLocation, StructureType<*>) -> Unit) {
        Types.all.forEach{
            registrator(it.key, it.value)
        }
    }

    private fun make(name: String, tag: TagKey<Structure>): ResourceKey<Structure> {
        val key = ResourceKey.create(Registries.STRUCTURE, resLoc(name))
        all.add(key)
        info[key] = StructureInfo(key, tag)
        return key
    }

    private fun makeCydonia(name: String, base: ResourceKey<Structure>): ResourceKey<Structure> {
        val key = make("cydonia/$name", info[base]!!.tag)
        cydoniaToOriginal[key] = base
        return key
    }

    class Bootstrapper(private val ctx: BootstapContext<Structure>) {
        // TODO: switch all structures to datagen so datagen for tags etc works properly
//        private fun registerSimpleJigsaw(key: ResourceKey<Structure>) {
//            context.register(
//                BuiltinStructures.VILLAGE_PLAINS, JigsawStructure(
//                    Structures.structure(
//                        holderGetter.getOrThrow(BiomeTags.HAS_VILLAGE_PLAINS), TerrainAdjustment.BEARD_THIN
//                    ), holderGetter2.getOrThrow(PlainVillagePools.START), 6,
//                    ConstantHeight.of(VerticalAnchor.absolute(0)), true, Heightmap.Types.WORLD_SURFACE_WG
//                )
//            )
//        }

        private fun registerTents() {
            ctx.register(RESEARCHER_TENT, ResearcherTentStructure.build(ctx))
            ctx.register(CydoniaVersion.RESEARCHER_TENT, ResearcherTentStructure.build(ctx, ResearcherTent.CYDONIA_ID))
        }

        // Used in data generation
        fun bootstrap() {
            registerTents()
        }
    }
    fun bootstrap(ctx: BootstapContext<Structure>) = Bootstrapper(ctx).bootstrap()

    data class StructureInfo(
        val key: ResourceKey<Structure>,
        val tag: TagKey<Structure>,
    )
}